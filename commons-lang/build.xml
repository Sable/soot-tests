<!--
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 -->
<!--
   "Lang" component of the Apache Commons Subproject
   $Id$
-->
<project name="Lang" default="compile" basedir=".">

    <!-- ========== Initialize Properties ===================================== -->
    <property file="${user.home}/${component.name}.build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/default.properties"/>
    <property name="jdk.javadoc" value="http://docs.oracle.com/javase/6/docs/api/"/>
    <property name="collections.javadoc" value="http://commons.apache.org/collections/api-release/"/>
    <property name="compile.target" value="1.6"/>
    <property name="compile.source" value="6"/>
    <property name="compile.encoding" value="UTF-8"/>
    <property name="test.failonerror" value="true"/>
    <property name="test.reports" value="${basedir}/test-reports.${commons-lang}/"/>
    <property name="test.output" value="${basedir}/tests.${commons-lang}/"/>

    <!-- ========== Construct compile classpath =============================== -->
    <path id="compile.classpath">
        <pathelement location="${basedir}/classes"/>
    </path>

    <!-- ========== Construct unit test classpath ============================= -->
    <path id="test.classpath">
      <pathelement location="${basedir}/target.${commons-lang}/"/>
        <pathelement location="${basedir}/libs/commons-io-2.2-SNAPSHOT.jar"/>
        <pathelement location="${test.output}"/>
        <pathelement location="${basedir}/libs/junit-4.11.jar"/>
        <pathelement location="${basedir}/libs/easymock-3.2.jar"/>
        <pathelement location="${basedir}/libs/hamcrest-all-1.3.jar"/>
    </path>

    <!-- ========== Executable Targets ======================================== -->
    <target name="init" description="Initialize and evaluate conditionals">
        <echo message="-------- ${component.name} ${component.version} --------"/>
        <filter token="name" value="${component.name}"/>
        <filter token="package" value="${component.package}"/>
        <filter token="version" value="${component.version}"/>
        <filter token="compile.source" value="${compile.source}"/>
        <filter token="compile.target" value="${compile.target}"/>
        <mkdir dir="${basedir}"/>
    </target>

    <!-- ========== Compile Targets ========================================= -->
    <target name="compile" depends="init" description="Compile shareable components">
        <mkdir dir="${basedir}/classes"/>
        <javac srcdir="${source.home}" destdir="${basedir}/classes" debug="${compile.debug}" deprecation="${compile.deprecation}" target="${compile.target}" source="${compile.source}" excludes="${compile.excludes}" optimize="${compile.optimize}" includeantruntime="false" encoding="${compile.encoding}">
            <classpath refid="compile.classpath"/>
        </javac>
        <copy todir="${basedir}/classes" filtering="on">
            <fileset dir="${source.home}" excludes="**/*.java,**/*.html"/>
        </copy>
    </target>

    <target name="compile.tests"  description="Compile unit test cases">
      <mkdir dir="${test.output}"/>
      <javac srcdir="${basedir}/src/test/java/" destdir="${test.output}" debug="${compile.debug}" deprecation="off" target="${compile.target}" source="${compile.source}" optimize="${compile.optimize}" includeantruntime="false" encoding="${compile.encoding}">
            <classpath refid="test.classpath"/>
        </javac>
        
        <copy todir="${basedir}/tests" filtering="on">
          <fileset dir="${basedir}/src/test/java/" excludes="**/*.java"/>
        </copy>
    </target>

    <!-- ========== Unit Tests ========================================= -->
    <target name="test" depends="compile.tests" description="Run all unit test cases">
        <echo message="Running unit tests ..."/>
        <mkdir dir="${test.reports}"/>
        <junit printsummary="true" showoutput="true" fork="yes" haltonfailure="${test.failonerror}">
            <classpath refid="test.classpath"/>
            <formatter type="plain" usefile="true" />
            <!-- If test.entry is defined, run a single test, otherwise run all valid tests -->
            <test name="${test.entry}" todir="${test.reports}" if="test.entry"/>
            <batchtest fork="yes" todir="${test.reports}" unless="test.entry">
              <fileset dir="${basedir}/src/test/java/">
                    <include name="**/DurationFormatUtilsTest.java"/>
                    <include name="**/MethodUtilsTest.java"/>
                <!--
                    <include name="**/*Test.java"/>
                    -->
                    <exclude name="**/Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="clean" description="Clean build and distribution directories">
        <delete dir="${basedir}"/>
    </target>

    <target name="all" depends="clean,test,compile" description="Clean and compile all components"/>


</project>
